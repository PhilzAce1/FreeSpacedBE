swagger: "2.0"
info:
  version: 0.0.0
  title: Free spaced api
  description: The Api for the free spaced application
host: "localhost"
basePath: "/"

tags:
  - name: Auth
    description: Auth API

paths:
  #[POST] auth
  /signup:
    post:
      tags:
        - Auth
      summary: Register New User
      parameters:
        - name: body
          in: body
          description: user Data
          required: true
          schema:
            $ref: "#/definitions/users"
      responses:
        201:
          description: "Created"
          schema:
            $ref: "#/definitions/signuprespose"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/errormessage"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/errormessage"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/errormessage"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/errormessage"
  #[GET] auth
  /me:
    get:
      tags:
        - Auth
      summary: Get Auth User Data
      responses:
        200:
          description: "An Object of Auth user data"
        500:
          description: "Server Error"

  #[POST] auth
  /login:
    post:
      tags:
        - Auth
      summary: Login user
      parameters:
        - name: body
          in: body
          description: user Data
          required: true
          schema:
            $ref: "#/definitions/users"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/signuprespose"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/errormessage"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/errormessage"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/errormessage"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/errormessage"
  #[POST] auth
  /forgotpassword:
    post:
      tags:
        - Auth
      summary: Forgot password
      parameters:
        - name: body
          in: body
          description: user email
          required: true
          schema:
            $ref: "#/definitions/forgot"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/forgotpasswordres"
        404:
          description: "Not Found"
          schema:
            $ref: "#/definitions/errormessage"
        400:
          description: "Bad Request"
          schema:
            $ref: "#/definitions/errormessage"
        409:
          description: "Conflict"
          schema:
            $ref: "#/definitions/errormessage"
        500:
          description: "Server Error"
          schema:
            $ref: "#/definitions/errormessage"

  #[POST] auth
  /changepassword:
    post:
      tags:
        - Auth
      summary: Change password
      parameters:
        - name: body
          in: body
          description: token , newPassword
          required: true
          schema:
            $ref: "#/definitions/changepassword"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/signuprespose"
        404:
          description: "Not Found"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /users/story/{id}:
    get:
      tags:
        - User
      summary: Get all Anon Users Stories
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /users/story/:
    get:
      tags:
        - User
      summary: Get all auth Users Stories
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  #[POST] auth
  /users/sendverifyemail:
    post:
      tags:
        - User
      summary: Send Email verification link
      parameters:
        - name: body
          in: body
          description: user email
          required: true
          schema:
            $ref: "#/definitions/forgot"
      responses:
        200:
          description: "Ok"
        404:
          description: "Not Found"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  #[POST] auth
  /users/verifyuser:
    post:
      tags:
        - User
      summary: Verify User
      parameters:
        - name: body
          in: body
          description: user email
          required: true
          schema:
            $ref: "#/definitions/forgot"
      responses:
        200:
          description: "Ok"
        404:
          description: "Not Found"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"
  /users/changepassword:
    put:
      tags:
        - User
      summary: Change User Password (Auth Route)
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              newPassword:
                type: string
                description: new password
              oldPassword:
                type: string
                description: user's old password
      responses:
        200:
          description: "Ok"
        404:
          description: "Not Found"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"

      deprecated: false
  /users/updateprofile:
    put:
      tags:
        - User
      summary: Update User Details (Auth Route)
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              firstname:
                type: string
                description: User's firstname

              lastname:
                type: string
                description: User's lastname

              username:
                type: string
                description: User's username

              profileimage:
                type: string
                description: User's profile image
              coverimage:
                type: string
                description: User's profile image

      responses:
        200:
          description: "Ok"
        404:
          description: "Not Found"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"

      deprecated: false
  /users/:
    delete:
      tags:
        - User
      summary: auth route to delete authuser
      responses:
        200:
          description: deleted story

      deprecated: false
  #[POST] auth
  /story/create:
    post:
      tags:
        - Story
      summary: Create Story
      parameters:
        - name: body
          in: body
          description: Create a story
          required: true
          schema:
            $ref: "#/definitions/createstorybody"
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/createstoryresponse"
        404:
          description: "Not Found"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /story/publish:
    put:
      tags:
        - Story
      parameters:
        - name: body
          in: body
          description: Publish a story
          required: true
          schema:
            type: object
            properties:
              storyId:
                type: string
                description: Story id
              publish:
                type: boolean
                description: true or false
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/createstoryresponse"
        404:
          description: "Not Found"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  # [GET] stories
  /story:
    get:
      tags:
        - Story
      parameters:
        - name: sort
          in: query
          type: string
          description: mostpopular || lastest ||freespacecertified
        - name: limit
          in: query
          type: string
          description: the numbers of items to return
        - name: skip
          in: query
          type: string
          description: The number of items to skip before starting to collect the result set


      summary: Find All Stories
      responses:
        200:
          description: "An List of all Stories in the datebase"

        500:
          description: "Server Error"

  /story/filter/sortstories:
    get:
      tags:
        - Story
      parameters:
        - name: sort
          in: query
          type: string
          description: mostpopular || lastest ||freespacecertified
        - name: limit
          in: query
          type: string
          description: the numbers of items to return
        - name: skip
          in: query
          type: string
          description: The number of items to skip before starting to collect the result set

      summary: filter stories

      responses:
        200:
          description: "An List of all Stories in the datebase"

        500:
          description: "Server Error"

  # [GET] story by Id
  /story/{id}:
    get:
      tags:
        - Story
      summary: Find Story By Id
      parameters:
        - name: id
          in: path
          description: Story Id
          required: true
          type: string
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  # [GET] story by Id
  /story/comments/{id}:
    get:
      tags:
        - Story
      summary: Get Comments of a Story by id
      parameters:
        - name: id
          in: path
          description: Story Id
          required: true
          type: string
      responses:
        200:
          description: "OK"
        409:
          description: "Conflict"
        500:
          description: "Server Error"
  # [GET] storiest
  /story/popular/getstories:
    get:
      tags:
        - Story
      parameters:
        - name: tag
          in: query
          type: string
          description: get popular stories in tag
      summary: Find top 6 popular stories
      responses:
        200:
          description: "An List of all Stories in the datebase"

        500:
          description: "Server Error"

  # [PATCH] users/id
  /story/update:
    patch:
      tags:
        - Story
      summary: Update Story By Id
      parameters:
        - name: Id
          in: path
          description: Storyid
          required: true
          type: integer
        - name: body
          in: body
          description: this is an Auth route, and user must be logged in
          required: true
          schema:
            type: object
            required:
              - title
              - text
              - tags
              - allow_therapist
              - id
            properties:
              title:
                type: string
                description: the title of the Story
              text:
                type: string
                description: The Body of the Story
              tags:
                type: array
                items:
                  type: string
                description: an array of string,e.g ["love", "peace"]
              allow_therapist:
                type: boolean
                description: true or false
              creatorId:
                type: string
                description: userId should be provided for an Authenticated User
              id:
                type: string
                description: id of the story you want to edit
      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /story/delete/{id}:
    delete:
      tags:
        - Story
      summary: this is an auth route and Authtoken must be passed
      parameters:
        - name: id
          in: path
          type: string
          description: story id
          required: true

      responses:
        200:
          description: "OK"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  #[POST] comment
  /comment/create:
    post:
      tags:
        - Comment
      summary: Create Comment
      parameters:
        - name: body
          in: body
          description: Comment body
          required: true
          schema:
            type: object
            properties:
              storyId:
                type: string
                description: the id of the comment you will like to Reply
              content:
                type: string
                description: text content of the reply
      responses:
        200:
          description: "Ok"
          schema:
            $ref: "#/definitions/createstoryresponse"
        404:
          description: "Not Found"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  #[POST] comment
  /comment/reply:
    post:
      tags:
        - Comment
      summary: Reply Comment
      parameters:
        - name: body
          in: body
          description: Reply Comment body
          required: true
          schema:
            type: object
            properties:
              commentId:
                type: string
                description: the id of the comment you will like to Reply
              content:
                type: string
                description: text content of the reply
      responses:
        200:
          description: "Ok"

        404:
          description: "Not Found"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  #[POST] auth

  #[POST] auth
  /bookmark/create:
    post:
      tags:
        - Bookmark
      summary: Bookmark A story [Auth Route]
      parameters:
        - name: body
          in: body
          description: Bookmark Body
          required: true
          schema:
            type: object
            properties:
              storyId:
                type: string
                description: the id of the comment you will like to Reply
              creatorId:
                type: string
                description: text content of the reply
      responses:
        200:
          description: "Ok"

        404:
          description: "Not Found"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"
  #[GET] get user bookmars
  /bookmark/:
    get:
      tags:
        - Bookmark
      summary: Get all Authenticated User bookmarks
      responses:
        200:
          description: "An Object of Auth user bookmarks"
        500:
          description: "Server Error"
  /tag:
    get:
      tags:
        - Tags
      responses:
        200:
          description: "An Object of Auth user bookmarks"
        500:
          description: "Server Error"

      deprecated: false
  /tag/trending:
    get:
      tags:
        - Tags
      responses:
        200:
          description: "Top 6 Trending tags"
        500:
          description: "Server Error"

      deprecated: false
  /tag/relatedstories/{storyId}:
    get:
      tags:
        - Tags
      parameters:
        - name: storyId
          in: path
          description: Story id
          required: true
          type: string

      responses:
        200:
          description: "An Object containing an Array of  similar Stories and  More Stories from User"
        500:
          description: "Server Error"

  /tag/name/{name}:
    get:
      tags:
        - Tags
      parameters:
        - name: name
          in: path
          description: Tagname
          required: true
          type: string

      responses:
        200:
          description: "An Object containing an Array of  similar Stories and  More Stories from User"
        500:
          description: "Server Error"

# definitions
definitions:
  createstoryresponse:
    type: object
    properties:
      success:
        type: boolean
        description: true or false
      payload:
        type: object
        properties:
          Id:
            type: string
            description: story Id
          title:
            type: string
            description: The title of the Story
          text:
            type: string
            description: body of the story
          tags:
            type: array
            items:
              type: string
            description: an array of string,e.g ["love", "peace"]
          allow_therapist:
            type: boolean
            description: "true | false"
          creatorId:
            type: string
            description: "user Id"
          contributors:
            type: string
            description: "null"
          views:
            type: string
            description: "null"
          share:
            type: string
            description: "null"
          is_spacecare:
            type: boolean
            description: "true | false"
          createdAt:
            type: string
            description: ddd

  createstorybody:
    type: object
    required:
      - title
      - text
      - tags
      - allow_therapist
    properties:
      title:
        type: string
        description: the title of the Story
      text:
        type: string
        description: The Body of the Story
      tags:
        type: array
        items:
          type: string
        description: an array of string,e.g ["love", "peace"]
      allow_therapist:
        type: boolean
        description: true or false
      creatorId:
        type: string
        description: userId should be provided for an Authenticated User

  forgotpasswordres:
    type: object
    properties:
      success:
        type: boolean
      payload:
        type: object
        properties:
          message:
            type: string
            description: email sent

  errormessage:
    type: object
    properties:
      success:
        type: boolean
        description: "true | false"
      message:
        type: string
        description: a message showing the cause of the error
  signuprespose:
    type: object
    properties:
      success:
        type: boolean
        description: true or false
      payload:
        type: object
        properties:
          Id:
            type: number
            description: user id
          email:
            type: string
            description: user email
  changepassword:
    type: object
    required:
      - token
      - newPassword
    properties:
      token:
        type: string
        description: token created and sent to user's email
      newPassword:
        type: string
        description: user's new Password
  forgot:
    type: string
    required:
      - email
    properties:
      email:
        type: string
        description: user email
  users:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: user Email
      password:
        type: string
        description: user Password

schemes:
  - https
  - http
